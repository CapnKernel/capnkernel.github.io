<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Mitch&#x27;s Notes</title>
    <link href="https://capnkernel.github.io/feed.xml" rel="self" />
    <link href="https://capnkernel.github.io" />
    <updated>2025-10-06T23:06:19+11:00</updated>
    <author>
        <name>Mitch</name>
    </author>
    <id>https://capnkernel.github.io</id>

    <entry>
        <title>Inventree 1.0.x install</title>
        <author>
            <name>Mitch</name>
        </author>
        <link href="https://capnkernel.github.io/inventree-100-install.html"/>
        <id>https://capnkernel.github.io/inventree-100-install.html</id>

        <updated>2025-09-23T13:53:30+10:00</updated>
            <summary>
                <![CDATA[
                    Bare metal Installation instructions here: https://docs.inventree.org/en/latest/start/install/ Here’s what I did different: Do the apt-get install of required system packages For Weasyprint: https://doc.courtbouillon.org/weasyprint/stable/first_steps.html apt install pango1.0-tools The rest of what Weasyprint needs will be auto-installed into the venv later. Create user with uid 1118 (to not&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Bare metal Installation instructions here:</p><p>  <a href="https://docs.inventree.org/en/latest/start/install/">https://docs.inventree.org/en/latest/start/install/</a></p><p>Here’s what I did different:</p><h2 id="install-system-packages">Install System Packages</h2>
<p>Do the <code>apt-get install</code> of required system packages<br>For Weasyprint:<br><a href="https://doc.courtbouillon.org/weasyprint/stable/first_steps.html">https://doc.courtbouillon.org/weasyprint/stable/first_steps.html</a><br><code>apt install pango1.0-tools</code><br>The rest of what Weasyprint needs will be auto-installed into the venv later.</p><h2 id="create-inventree-user">Create InvenTree User</h2>
<p>Create user with uid 1118 (to not clash with other uids), which is a member of <code>www-data</code> group.</p><p>Instead of:</p><pre><code>useradd -m -d /home/inventree -s /bin/bash inventree
</code></pre>
<p>… run:</p><pre><code>useradd -m -U -u 1118 -G www-data -s /bin/bash inventree
chown inventree:www-data /home/inventree
chmod o-rwx /home/inventree
</code></pre>
<p>Re <code>su inventree</code>, I installed my own ssh public key:</p><pre><code>[ -f /home/inventree/.ssh/authorized_keys ] || (
  cd /home/inventree
  mkdir --mode 700 .ssh
    chown inventree:inventree .ssh
  cp /home/mjd/.ssh/mjd@xiaomao.afork.com .ssh/
  cat .ssh/*@* | sort | uniq &gt; .ssh/authorized_keys
    chown inventree:inventree .ssh/*
    chmod go-rwx .ssh/authorized_keys
)
</code></pre>
<p>From here on, do everything logged in as the inventree user.</p><h2 id="create-required-directories">Create Required Directories</h2>
<pre><code>cd
mkdir data
cd data
mkdir static media backup
chgrp www-data static media backup
chmod g+s backup media
cd ..
</code></pre>
<h2 id="download-source-code">Download Source Code</h2>
<p>Instead of:</p><pre><code>git clone https://github.com/inventree/inventree src
</code></pre>
<p>… run:</p><pre><code>git clone -b stable https://github.com/inventree/inventree src
</code></pre>
<p>Then: Create and patch config (<code>~/src/config/config.yaml</code>), as follows.</p><p><strong>Note, you’ll need to provide values for anything with a % below.</strong></p><pre><code># Helper function
yaml_set() {
  F=~/src/config/config.yaml
  cp $F $F.tmp; awk -v key=&quot;$1&quot; -v val=&quot;$2&quot; &#39;BEGIN {
      have_dot = index(key, &quot;.&quot;);
      if (have_dot) {
          split(key, parts, &quot;.&quot;)
          parent = parts[1]
          child = parts[2]
      }
  }
  { 
    if (have_dot) {
      if ($0 ~ &quot;^[[:alnum:]_]+:&quot;) in_parent = 0;
      if ($0 ~ &quot;^&quot; parent &quot;:&quot;) in_parent = 1;
      if (in_parent &amp;&amp; match($0, &quot;^([[:space:]]*)(#[[:space:]]*)?(&quot; child &quot;):&quot;, m)) $0 = m[1] m[3] &quot;: &quot; val;
    } else if (patsplit($0, m, &quot;^[[:space:]]*(#[[:space:]]*)?&quot; key &quot;:&quot;)) $0 = key &quot;: &quot; val;
    print
  }&#39; &lt; $F.tmp &gt; $F; rm $F.tmp
}
</code></pre>
<pre><code>ln -sf ../src/backend/InvenTree/config_template.yaml src/config/config.yaml.orig
cp src/config/config.yaml.orig src/config/config.yaml

yaml_set database.ENGINE mysql
yaml_set database.NAME itree
yaml_set database.USER dbuser
yaml_set database.PASSWORD %same-as-for-the-portal

yaml_set site_url https://itree.superlab.au/

yaml_set debug False

yaml_set admin_enabled True
yaml_set admin_url itree-admin
yaml_set admin_user admin
yaml_set admin_email itreeadmin@superhouse.tv
yaml_set admin_password %admin-user-password

yaml_set language en-AU
yaml_set timezone Australia/Melbourne

yaml_set email.sender itree@superlab.au
yaml_set email.host mail.smtp2go.com
yaml_set email.port 2525
yaml_set email.username itree
yaml_set email.password %smtp2go-password

yaml_set plugins_enabled True

yaml_set media_root /home/inventree/data/media
yaml_set static_root /home/inventree/data/static
yaml_set backup_dir /home/inventree/data/backup

yaml_set background.workers 1

yaml_set login_default_protocol https

yaml_set global_settings.INVENTREE_DEFAULT_CURRENCY AUD
</code></pre>
<h2 id="create-virtual-environment">Create Virtual Environment</h2>
<p>As per instructions.</p><h2 id="install-inventree-packages">Install InvenTree Packages</h2>
<p>Instead of:</p><pre><code>pip install --upgrade --ignore-installed invoke
invoke install
</code></pre>
<p>… run:</p><pre><code>cd ~/src
pip install --upgrade --ignore-installed invoke
invoke install --skip-plugins
</code></pre>
<p>If you run <code>invoke</code> and get a message <code>Can&#39;t find any collection named &#39;tasks&#39;!</code>, then you need to run <code>cd ~/src</code> first, because <code>invoke</code> is sensitive to the directory it runs in.</p><p>If you run <code>invoke install</code> and you get this message:</p><pre><code>yaml.scanner.ScannerError: while scanning for the next token
found character &#39;%&#39; that cannot start any token
  in &quot;/home/inventree/src/config/config.yaml&quot;, line 27, column 13
</code></pre>
<p>… then you need to go edit <code>~/etc/config.yaml</code> and patch in the passwords for any line containing <code>%</code>.</p><p><code>--skip-plugins</code> is necessary because without this, the install tries to access the db, which hasn’t been set up yet.</p><h2 id="create-database">Create Database</h2>
<p>Db will be MariaDB.  Follow MySQL / MariaDB section.  Replace this:</p><pre><code>sudo apt-get install mysql-server libmysqlclient-dev
</code></pre>
<p>with</p><pre><code>sudo apt-get install mariadb-server libmysqlclient-dev
</code></pre>
<p>and</p><pre><code>pip3 install mysqlclient mariadb
</code></pre>
<p>with</p><pre><code>pip3 install mysqlclient
</code></pre>
<p>Re the SQL statements, the db I created is called <code>itree</code>, and the db user is <code>dbuser</code> (same as for the portal).  The password will need to match what’s in <code>~/etc/config.yaml</code> (see above).</p><pre><code>sudo mysql -u root
mysql&gt; CREATE DATABASE itree;
mysql&gt; GRANT ALL ON itree.* TO &#39;dbuser&#39;@&#39;%&#39;;
mysql&gt; FLUSH PRIVILEGES;
mysql&gt; EXIT;
</code></pre>
<p><strong>Don’t follow the web page from here on</strong></p><h2 id="initialize-database">Initialize database</h2>
<p><strong>Don’t follow any of this</strong></p><h2 id="and-then">And then…</h2>
<p>This creates the db tables and a bunch of other important setup things.</p><pre><code>invoke update --skip-backup --no-frontend
</code></pre>
<h2 id="download-front-end-react-app-files">Download front end react app files</h2>
<pre><code>TAG=v$(awk &#39;match($0, &quot;^INVENTREE_SW_VERSION = \047(.*)\047&quot;, m) {print m[1]}&#39; &lt; ./src/backend/InvenTree/InvenTree/version.py)
mkdir -p ~/src/src/backend/InvenTree/web/static
invoke frontend-download --tag $TAG
invoke static
</code></pre>
<h2 id="worker-service">Worker service</h2>
<p>Inventree has a backend worker for operations that can take time, such as generating reports and sending emails.  This worker should be started on boot, and restarted if it fails.  For that we’re using supervisor (<a href="https://docs.inventree.org/en/latest/start/bare_prod/#configure-supervisor">docs</a>).  </p><pre><code>sudo apt-get install supervisor
cat &lt;&lt; EOF | sudo tee /etc/supervisor/conf.d/inventree.conf &gt; /dev/null
; # Supervisor Config File
; Example configuration file for running InvenTree worker using supervisor
; Based on https://github.com/inventree/InvenTree/blob/master/contrib/deploy/supervisord.conf

; InvenTree Background Worker Process
; A background task manager processes long-running and periodic tasks
; InvenTree uses django-q for this purpose
[program:inventree-cluster]
user=uwsgi
directory=/home/inventree/src/src/backend/InvenTree
command=/home/inventree/env/bin/python manage.py qcluster
startsecs=10
autostart=true
autorestart=true
stdout_logfile=/var/log/uwsgi/app/inventree-worker.log
stderr_logfile=/var/log/uwsgi/app/inventree-worker-err.log
EOF

cat &lt;&lt; EOF | sudo tee /etc/supervisor/conf.d/inet_http_server.conf &gt; /dev/null
[inet_http_server]
port = 127.0.0.1:9001
EOF

sudo systemctl reload supervisor
</code></pre>
<p>Logs for the worker can be viewed here:
<a href="http://localhost:9001/">http://localhost:9001/</a>
… where <code>localhost</code> is the inventree server.  Since that port is only available locally on the server, you’ll need to use <code>ssh -L</code> or similar to get the HTTP request forwarded from your machine to the server, or use the <code>links</code> text browser.</p><h2 id="install-redis">Install redis?</h2>
<p>If redis is installed, it will be used by the backend web code to communicate to the backend worker code.  If it’s not there, things will still work, but slower.  Symptoms are long waits for worker stuff to happen.  </p><pre><code>## So let&#39;s not
# sudo apt install redis-server
</code></pre>
<h2 id="setting-up-uwsgi-app-server">Setting up uWSGI (app server)</h2>
<p>It is assumed that the <code>uwsgi-emperor</code> package has already been installed, and it’s up and running the portal.</p><pre><code>cat &lt;&lt; EOF | sudo tee /etc/uwsgi-emperor/vassals-available/inventree.ini &gt; /dev/null
[uwsgi]
plugin = python3
chdir = /home/inventree/src/src/backend/InvenTree
virtualenv = /home/inventree/env
# /home/inventree/src/src/backend/InvenTree/InvenTree/wsgi.py
module = InvenTree.wsgi:application

master = true
processes = 2
enable-threads = true

cheaper = 1
cheaper-initial = 0
cheaper-min = 0
cheaper-max = 4
cheaper-algo = spare

# idle = 60
# die-in-idle = true

http-socket = /run/uwsgi/%n.sock
chmod-socket = 660
chown-socket = uwsgi:www-data
uid = uwsgi
gid = www-data

vacuum = true
die-on-term = true

# Optional logging:
logto = /var/log/uwsgi/app/%n.log
EOF

sudo ln -sf ../vassals-available/inventree.ini /etc/uwsgi-emperor/vassals-enabled/inventree.ini 
</code></pre>
<p>Check that the app server is now running.  Example:</p><pre><code>inventree@portal:~$ ps aux | grep uwsgi-core | grep inventree.ini
wsgi      67994 86.1 15.9 230520 157424 ?       R    15:07   0:19 /usr/bin/uwsgi-core --ini inventree.ini

inventree@portal:~$ 
</code></pre>
<p>Check also for the existence of <code>/var/run/uwsgi/inventree.sock</code>.</p><p>The uWSGI log can be viewed with:</p><pre><code>sudo journalctl -u uwsgi-emperor
</code></pre>
<p>Add <code>-f</code> to tail the log.</p><h2 id="setting-up-caddy-web-proxy">Setting up caddy (web proxy)</h2>
<p>Amend <code>/etc/caddy/Caddyfile</code> to add this:</p><pre><code># CORS headers control (used for static and media files)
(cors-headers) {
    header Allow GET,HEAD,OPTIONS
    header Access-Control-Allow-Origin *
    header Access-Control-Allow-Methods GET,HEAD,OPTIONS
    header Access-Control-Allow-Headers Authorization,Content-Type,User-Agent
 
    @cors_preflight{args[0]} method OPTIONS
 
    handle @cors_preflight{args[0]} {
        respond &quot;&quot; 204
    }
}

itree.example.com {
        log {
                output file /var/log/caddy/itree.log
                format filter {
                        wrap console
                        fields {
                                request&gt;headers&gt;Authorization delete
                        }
                }
        }

        encode gzip

        # Add request body size limit for file uploads
        request_body {
                max_size 100MB
        }

        header {
                Strict-Transport-Security max-age=31536000;
        }

        handle /favicon.ico {
                root * /home/inventree/data/static/img/favicon
                file_server
        }

        handle_path /static/* {
                import cors-headers static
                root * /home/inventree/data/static
                file_server
        }

        handle_path /media/* {
                import cors-headers media
                root * /home/inventree/data/media
                file_server
                # Authentication for media files
                forward_auth unix//run/uwsgi/inventree.sock {
                        uri /auth/
                }
        }

        reverse_proxy unix//run/uwsgi/inventree.sock
}

# Refer to the Caddy docs for more information:
# https://caddyserver.com/docs/caddyfile
</code></pre>
<p>Note: Change <code>itree.example.com</code> to a suitable hostname.  You’ll also need to create A or CNAME DNS records for this host. </p><p>(Basis: <a href="https://github.com/inventree/inventree/blob/master/contrib/container/Caddyfile">https://github.com/inventree/inventree/blob/master/contrib/container/Caddyfile</a>)</p><p>Restart caddy:</p><pre><code>sudo systemctl reload caddy
</code></pre>
<p>The caddy log can be viewed with:</p><pre><code>sudo journalctl -u caddy
</code></pre>
<p>Add <code>-f</code> to tail the log.</p><h2 id="backups">Backups</h2>
<p>Backups of the database and of the media files are done to <code>~/data/backup</code> once a day by the worker.  Database backups end in <code>.dump.gz</code>, and media backups end in <code>.tar.gz</code>.  A cron job, run by the <code>uwsgi</code> user, sends the backups offsite every four hours using <code>rsync</code>.  The backup filenames contain the hostname rather than the virtual host name due to <a href="https://github.com/inventree/InvenTree/issues/10488">limitations in InvenTree</a>.</p><h2 id="upgrading">Upgrading</h2>
<pre><code>cd ~/src
git pull
</code></pre>
<p>Then do the steps in the <strong>Download front end react app files</strong> section above.  Then:</p><pre><code>sudo touch /etc/uwsgi-emperor/vassals/inventree.ini
</code></pre>
<p>You’ll need to reload any web pages you have open.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ChatGPT is almost useful for whole-picture coding</title>
        <author>
            <name>Mitch</name>
        </author>
        <link href="https://capnkernel.github.io/chatgpt-is-almost-useful-for-whole-picture-coding.html"/>
        <id>https://capnkernel.github.io/chatgpt-is-almost-useful-for-whole-picture-coding.html</id>

        <updated>2025-09-01T14:49:18+10:00</updated>
            <summary>
                <![CDATA[
                    Frickin' ChatGPT (even ChatGPT 5) is so damn frustrating. It's almost useful, to the point where it's useless, because it chews up so much time while you try to push it from nearly right to actually right. I've enlisted its help in doing some website&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Frickin' ChatGPT (even ChatGPT 5) is so damn frustrating.  It's almost useful, to the point where it's useless, because it chews up so much time while you try to push it from nearly right to actually right.</p>
<p>I've enlisted its help in doing some website coding, which is a combination of Django on the server, and <a href="https://htmx.org/">htmx</a> in the browser.  (If you haven't met htmx, it's an awesome concept)<br>I wouldn't need ChatGPT, except that while I can code Django in my sleep, I'm terrible at front end coding.</p>
<p>So, I carefully specify the requirements, and ChatGPT happily emits 15+ files it says will do the job.  And they look great.</p>
<p>So I spend the time to copy the contents of all those files to VSCode, and run it.</p>
<p>Soon, bugs emerge.  I ask ChatGPT about the bug, and ChatGPT says "yep, sorry about that, here's a new file".  Which then has another bug in it, or it's inconsistent with some other file it already gave me.  So, I ask ChatGPT to generate me a new set, which it does.  But it's forgotten what it did last time, and there are differences between how it structured things last time compared to this time.  So I have no choice but to copy across the contents of all 15+ files.</p>
<p>Rinse and repeat a few times, and then lo, ChatGPT starts forgetting requirements I already specified.  When asked about it, ChatGPT says it assumed I didn't need those requirements any more.</p>
<p>I'm fed up with however many cycles of stuff that almost works, which then ends up with me wasting 20 minutes finding out how it doesn't actually work this time. </p>
<p>I'm going to mention here, that a concept from Stalinist USSR was the concept of "wrecking": Something somewhat different to sabotage, it means intentionally or unintentionally doing ones job in a crappy way so that the organisational objective couldn't be met.  A kind of "silent quitting" passive aggressive fouling up the smooth operations of things.  </p>
<p><a href="https://en.wikipedia.org/wiki/Wrecking_(Soviet_Union)" target="_blank" rel="noopener">Wikipedia: Wrecking (Soviet Union)</a></p>
<p>Stalin asserted that a good deal of the failure of Soviet-style socialism to achieve its goals was because of the presence in the work force of "wreckers", people who were against class struggle.  A kind of economic fifth column, although not necessarily organised.  </p>
<p>I'm going to suggest that LLMs are a form of wrecking agent, designed to prevent those who would trust it from getting any successful work done by emitting ostensibly useful but actually flawed information.</p>
<p>Who would be behind such a thing?  I'm not sure there was any particular evil overlord behind Soviet wrecking; it was just a convenient bogeyman on which to blame failure to meet utopian standards.</p>
<p>Or perhaps communists, or aliens, are behind it.  Communist aliens even!  I don't know.  All I know is I still don't have completely working code that meets my requirements, and I'm pretty sick of wasting time trying to get ChatGPT to provide it.</p>
<p>Update: I've recently been using <a href="https://chat.deepseek.com/">DeepSeek</a>.  It's _miles_ better.  It's rarely wrong, and it does a much better job of understanding the whole of the problem, as if its _attention span_ was better.  DeepSeek is actually useful.  Oh, and the chat mode is free, so you can talk and talk, and it won't suddenly say "well that's it for today, unless you pay me money".  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Using virtual environments to separate project and OS Python software</title>
        <author>
            <name>Mitch</name>
        </author>
        <link href="https://capnkernel.github.io/using-virtual-environments-to-separate-project-and-os-python-software.html"/>
        <id>https://capnkernel.github.io/using-virtual-environments-to-separate-project-and-os-python-software.html</id>

        <updated>2024-02-27T12:00:00+11:00</updated>
            <summary>
                <![CDATA[
                    So, if you need a package that’s part of your OS that didn’t get installed at install time, you can install them later with apt or dnf. And, some packages on your computer may be written in Python. The collection of software that makes up&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>So, if you need a package that’s part of your OS that didn’t get
installed at install time, you can install them later with <code>apt</code> or
<code>dnf</code>.  And, some packages on your computer may be written in
Python.  </p><p>The collection of software that makes up your OS (and which versions of the software) is chosen and tested by the OS bulders to work together well.  But let’s say you want to
install a Python package that isn’t part of the OS, or perhaps your
project needs a version that’s different to that provided by the OS.
Traditionally you could use <code>pip</code> to install different Python software
into the OS’s main place for Python packages, typically
<code>/usr/lib64/python3.12/site-packages</code> or similar, depending on your OS
and main Python version.</p><p>The problem is that installing not-included-in-the-OS packages can mess
up the software that’s there as part of the OS.  Similarly, your
project may need an updated version of a package, but this updated
version is incompatible with the version your OS needs.  Upgrading may
break your OS!</p><p>In order to prevent this happening, when you install
not-included-in-the-OS (or updated) Python code, you’re now strongly
encouraged to install it into a “virtual environment”, rather than
where the OS puts stuff.  “Virtual environment” is just a directory
somewhere (usually nestled in with your project files) where Python
packages can be installed into.  Then, when you “activate” that virtual
environment and import something within your Python code, Python will
look there first, and if it can’t find it there, then it’ll search the
OS place.</p><p>This also means you no longer need to be root to install software
(because it gets installed somewhere in your home directory), and
you can delete this virtual env when you’re finished without compromising the OS.</p><p>Now, it is possible to get <code>pip</code> to install into where the OS puts its
Python code, but really, just don’t.  The move to virtual environments
is a <em>good thing</em>!  Let me give a practical demonstration:  I like
writing web apps in Django, which is an application framework written
in Python.</p><p>So I’m logged into my computer as “mjd”, and my home directory is
<code>/home/mjd</code>:</p><pre><code>[mjd@xiaomao ~]$ pwd
/home/mjd
</code></pre>
<p>I’ll <code>cd</code> into where my web app is, then <code>cd</code> into my <code>pyproj</code> dir
inside that:</p><pre><code>[mjd@xiaomao ~]$ cd git/afork.com/
[mjd@xiaomao afork.com]$ ls
pyproj  README.md
[mjd@xiaomao afork.com]$ cd pyproj/
[mjd@xiaomao pyproj]$ ls
authuser  conf  db.sqlite3  guestbook  manage.py  requirements.txt  static
</code></pre>
<p>Note there’s a requirements.txt file that says the python packages that
need to be installed:</p><pre><code>[mjd@xiaomao pyproj]$ cat requirements.txt 
Django==5.0.2
django-dotenv==1.4.2
dj_database_url==2.1.0
pytz==2024.1
# requests==2.31
</code></pre>
<p>And also that Django is not currently installed: </p><pre><code>mjd@xiaomao pyproj]$ ./manage.py check
ModuleNotFoundError: No module named &#39;django&#39;

ImportError: Couldn&#39;t import Django. Are you sure it&#39;s installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?
</code></pre>
<p>So, if I type <code>python</code>, which Python do I get, and where does it load
packages from?</p><pre><code>[mjd@xiaomao pyproj]$ type python
python is /usr/bin/python
[mjd@xiaomao pyproj]$ python -c &#39;import sys; print(sys.path)&#39;
[&#39;&#39;, &#39;/usr/lib64/python311.zip&#39;, &#39;/usr/lib64/python3.11&#39;, &#39;/usr/lib64/python3.11/lib-dynload&#39;, &#39;/usr/local/lib/python3.11/site-packages&#39;, &#39;/usr/lib64/python3.11/site-packages&#39;, &#39;/usr/lib/python3.11/site-packages&#39;]
</code></pre>
<p>Let’s create a virtual environment (or “venv” for short), which is
stored in a directory called <code>env</code>, in the current directory:</p><pre><code>mjd@xiaomao pyproj]$ python -m venv env
[mjd@xiaomao pyproj]$ ls -l
total 164
drwxr-xr-x. 4 mjd mjd   4096 Feb 20 13:59 authuser
drwxr-xr-x. 3 mjd mjd   4096 Feb 27 13:43 conf
-rw-r--r--. 1 mjd mjd 135168 Feb 20 14:57 db.sqlite3
drwxr-xr-x. 5 mjd mjd   4096 Feb 27 13:51 env
drwxr-xr-x. 5 mjd mjd   4096 Feb 23 18:35 guestbook
-rwxr-xr-x. 1 mjd mjd    660 Feb 20 13:35 manage.py
-rw-r--r--. 1 mjd mjd     88 Feb 20 13:35 requirements.txt
drwxr-xr-x. 3 mjd mjd   4096 Feb 20 14:48 static
</code></pre>
<p>Inside <code>env</code>, there’s a directory called <code>bin</code>, that has versions of
<code>pip</code> and <code>python</code> that will load packages from this virtual environment:</p><pre><code>[mjd@xiaomao pyproj]$ ls env/bin
activate      activate.fish  pip   pip3.11  python3
activate.csh  Activate.ps1   pip3  python   python3.11
</code></pre>
<p>In order to access this virtual environment, we have to “activate” it.
This will alter our path so <code>python</code> picks up the Python that’s in the
venv’s <code>bin</code> dir, and pip will pick up the <code>pip</code> that’s in the <code>bin</code> dir:</p><pre><code>[mjd@xiaomao pyproj]$ . env/bin/activate
(env) [mjd@xiaomao pyproj]$
</code></pre>
<p>Notice the <code>(env)</code> in our command-line prompt?  That’s our cue that
we’re running inside the virtual environment.  So, let’s see which
Python we get when we run <code>python</code>, and where it looks for packages:</p><pre><code>(env) [mjd@xiaomao pyproj]$ type python
python is /home/mjd/git/afork.com/pyproj/env/bin/python
(env) [mjd@xiaomao pyproj]$ python -c &#39;import sys; print(sys.path)&#39;
[&#39;&#39;, &#39;/usr/lib64/python311.zip&#39;, &#39;/usr/lib64/python3.11&#39;, &#39;/usr/lib64/python3.11/lib-dynload&#39;, &#39;/home/mjd/git/afork.com/pyproj/env/lib64/python3.11/site-packages&#39;, &#39;/home/mjd/git/afork.com/pyproj/env/lib/python3.11/site-packages&#39;]
</code></pre>
<p>That’s great, we can see that python will now look for packages in our
venv. Now that our virtual env is activated, we can run <code>pip</code>, which
will install into the venv:</p><pre><code>(env) [mjd@xiaomao pyproj]$ pip install -r requirements.txt 
Collecting Django==5.0.2
  Using cached Django-5.0.2-py3-none-any.whl (8.2 MB)
...
Successfully installed Django-5.0.2 asgiref-3.7.2 dj_database_url-2.1.0 django-dotenv-1.4.2 pytz-2024.1 sqlparse-0.4.4 typing-extensions-4.10.0
(env) [mjd@xiaomao pyproj]$
</code></pre>
<p>So what happened when we did the <code>pip</code>?  Let’s have a look into where
the venv <code>python</code> will look for packages:</p><pre><code>(env) [mjd@xiaomao pyproj]$ ls -l env/lib64/python3.11/site-packages/
total 200
drwxr-xr-x.  3 mjd mjd   4096 Feb 27 13:52 asgiref
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 asgiref-3.7.2.dist-info
drwxr-xr-x.  3 mjd mjd   4096 Feb 27 13:51 _distutils_hack
-rw-r--r--.  1 mjd mjd    151 Feb 27 13:51 distutils-precedence.pth
drwxr-xr-x. 18 mjd mjd   4096 Feb 27 13:52 django
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 Django-5.0.2.dist-info
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 django_dotenv-1.4.2.dist-info
drwxr-xr-x.  3 mjd mjd   4096 Feb 27 13:52 dj_database_url
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 dj_database_url-2.1.0.dist-info
-rw-r--r--.  1 mjd mjd   3669 Feb 27 13:52 dotenv.py
drwxr-xr-x.  5 mjd mjd   4096 Feb 27 13:51 pip
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:51 pip-22.3.1.dist-info
drwxr-xr-x.  5 mjd mjd   4096 Feb 27 13:51 pkg_resources
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 __pycache__
drwxr-xr-x.  4 mjd mjd   4096 Feb 27 13:52 pytz
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 pytz-2024.1.dist-info
drwxr-xr-x.  8 mjd mjd   4096 Feb 27 13:51 setuptools
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:51 setuptools-65.5.1.dist-info
drwxr-xr-x.  5 mjd mjd   4096 Feb 27 13:52 sqlparse
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 sqlparse-0.4.4.dist-info
drwxr-xr-x.  2 mjd mjd   4096 Feb 27 13:52 typing_extensions-4.10.0.dist-info
-rw-r--r--.  1 mjd mjd 117599 Feb 27 13:52 typing_extensions.py
</code></pre>
<p>Knowing that these packages are now installed in the venv, we can now
run our Django program without error:</p><pre><code>(env) [mjd@xiaomao pyproj]$ ./manage.py check
System check identified no issues (0 silenced).
</code></pre>
<p>So let’s try it out.  We’ll run Django’s testing webserver on port
8000, but before that, some trickery: Let’s start a job that will sleep
for 10 seconds, then use <code>curl</code> to request the top level page from the
site and show the first 4 lines of the HTML.  (The page doesn’t exist
and will 404, but that’s ok).  The <code>()</code> bundles the sleep and curl, and
the <code>&amp;</code> runs the job in the background:</p><pre><code>(env) [mjd@xiaomao pyproj]$ (sleep 10; curl -s &#39;http://localhost:8000/&#39; | head -4) &amp;
</code></pre>
<p>And we can see that job is running in the background: </p><pre><code>(env) [mjd@xiaomao pyproj]$ jobs
[1]+  Running                 ( sleep 10; curl -s &#39;http://localhost:8000/&#39; | head -4 ) &amp;
</code></pre>
<p>Now, while the sleep is happening, we can start the web server, which is dutifully listening on port 8000: </p><pre><code>(env) [mjd@xiaomao pyproj]$ ./manage.py runserver
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</code></pre>
<p>Ten seconds after we started the curl job, the request is made (and 404s, as expected), and we can see the first four lines of the returned HTML: </p><pre><code>Not Found: /
[27/Feb/2024 13:55:34] &quot;GET / HTTP/1.1&quot; 404 2279
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
</code></pre>
<p>Finally, I can press <em>Ctrl-C</em> to break out of the web server, and
deactivate the virtual environment:</p><pre><code>^C
(env) [mjd@xiaomao pyproj]$ 
(env) [mjd@xiaomao pyproj]$ deactivate 
[mjd@xiaomao pyproj]$ 
</code></pre>
<p>(Deactivating is optional) </p><p>By using a virtual environment, we’ve been able to install Python
software without interfering with (or destabilising) the Python
software that comes with the OS.  We also didn’t need to log in as root
to do this, and it’s valid and useful to have several virtual
environments, one per project, which may contain the same packages, but
where the versions of the packages is different.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Right angle mounting of fuses: A small adaptor board.</title>
        <author>
            <name>Mitch</name>
        </author>
        <link href="https://capnkernel.github.io/right-angle-mounting-of-fuses-a-small-adaptor-board.html"/>
        <id>https://capnkernel.github.io/right-angle-mounting-of-fuses-a-small-adaptor-board.html</id>

        <updated>2023-01-26T12:00:00+11:00</updated>
            <summary>
                <![CDATA[
                    So an ongoing project of mine is an autopilot for my boat. Here’s the latest incarnation: The highest point on the board is the red fuse in the middle of the board, which is made even higher by the fuse holder underneath it. 21mm is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>So an ongoing project of mine is an autopilot for my boat.  Here’s the latest
incarnation:</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/proud-fuse.jpg" alt="Autopilot pic, showing high fuse" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-xs.jpg 640w ,https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-sm.jpg 768w ,https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-md.jpg 1024w ,https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/9/responsive/proud-fuse-2xl.jpg 1920w"></figure><p>The highest point on the board is the red fuse in the middle of the board,
which is made even higher by the fuse holder underneath it.</p><table>
<thead>
<tr>
<th>Part</th>
<th align="right">Height</th>
</tr>
</thead>
<tbody><tr>
<td>Automotive fuse</td>
<td align="right">13.5mm</td>
</tr>
<tr>
<td>Fuse holder</td>
<td align="right">7.5mm</td>
</tr>
<tr>
<td><strong>Total</strong></td>
<td align="right">21mm</td>
</tr>
</tbody></table>
<p>21mm is a lot, and it’s going to interfere with the slimmer custom case I’m
planning.  So what can I do?  Well, I’m planning to make a small PCB to
mount fuses parallel to the PCB, rather than at right angles.
(Actually, two PCBs because I’d like to support both standard and mini
automotive fuses).  By mounting the fuse on its side, I hope to get the
height from 21mm down to the width of the fuse holder (7mm).</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/fuse-pics.jpg" alt="Pic of standard and mini fuses, plus holders" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-xs.jpg 640w ,https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-sm.jpg 768w ,https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-md.jpg 1024w ,https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/9/responsive/fuse-pics-2xl.jpg 1920w"></figure><p>Each of the two small PCBs will have slots for a standard or mini
automotive fuse, and two tinned-pad legs off to the side like an overgrown edge
connector.  These two legs will go down through two slots in the next
revision of my autopilot.  Solder will hold the legs into the slots.</p><p>As usual, I designed these boards in KiCad.</p><h2 id="step-1-schematic">Step 1: Schematic</h2>
<p>The schematic, which looks the same for both boards, has just the fuse (well
really the fuse holder) and the legs.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/1-schematic.png" alt="Schematic" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/1-schematic-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/1-schematic-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/1-schematic-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/1-schematic-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/1-schematic-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/1-schematic-2xl.png 1920w"></figure><h2 id="step-2-footprint-for-the-standard-fuse-holder">Step 2: Footprint for the standard fuse holder</h2>
<p>Here’s the footprint for the standard fuse holder.  I’ve tried this footprint
out before, so I know it’s the right size.  I’ve made the pads for the slots 
a little larger than the outline of the fuseholder, so KiCad was complaining
that the teal-coloured silkscreen was being obscured by the pad.  To work
around this, I’ve removed the silkscreen next to the pads.</p><p>Note that for these fuse holders, the two left pads are electrically
connected, and the two right pads are connected.  The way to tell this to
KiCad is to give the left two and the right two the same pad numbers.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/2-std-footprint.png" alt="Standard fuse holder footprint" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/2-std-footprint-2xl.png 1920w"></figure><h2 id="step-3-footprint-for-the-mini-fuse-holder">Step 3: Footprint for the mini fuse holder</h2>
<p>I followed a similar process to make this footprint: Take a fuse holder,
measure the case and pin dimensions with digital calipers, then size the footprint dimensions
accordingly.</p><p>Because this is only really possible if you have the actual part, it’s
important to buy these parts ahead of time.  To go from having the idea of
using a part, to having a PCB which you know works with that part can mean:</p><ul>
<li>Source and buy part from China</li>
<li>Wait for part to arrive</li>
<li>Design footprint and/or PCB to suit actual part</li>
<li>Order PCB from China</li>
<li>Wait for PCBs to arrive</li>
<li>(And it’s possible you’ll need to repeat this if the part isn’t suitable, or the PCB design isn’t right)</li>
</ul>
<p>I guessed I’d want to try mini fuses, so I ordered these parts weeks ago.
This process is a pipeline, and you have to keep your pipeline full!</p><p>This footprint has three rectangles.  The inner grey rectangle is for the size
of the part.  The teal rectangle is for the silkscreen which is printed around
the part.  You still want to see the silkscreen when the part is in place, so
it has to be a little larger.  The outer light grey rectangle is the “courtyard”.
It’s designed to ensure that there’s enough space between adjacent components.
When doing a DRC (Design Rule Check), KiCad will complain if there are
overlapping courtyards.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/3-mini-footprint.png" alt="Mini fuse holder footprint" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/3-mini-footprint-2xl.png 1920w"></figure><h2 id="step-4-footprint-for-the-legs-which-go-through-the-main-pcb">Step 4: Footprint for the legs which go through the main PCB</h2>
<p>Something in common for these two boards are the legs, so I’ve put the
legs, and the associated board outline near the legs, into a footprint.</p><p>Four things to note:</p><ul>
<li>I’ve chosen to interpret the horizontal origin of the footprint as 
where it will sit when inserted into the main PCB.</li>
<li>The two little teal-coloured marks next to the pad numbers represent
the edge of the main board.  Above the mark will be buried in the main
board slot, and below will poke out.  From this I can estimate what the
shape of the solder fillet will be.</li>
<li>The yellow line represents the edge of the PCB.  Regarding the final
PCB, KiCad is happy if some of the PCB outline comes from a footprint, and
some is drawn as part of the PCB.  Being able to include some of the PCB
outline in the footprint is super useful when the footprint is for legs
like these, or you’re showing how a connector is positioned on the edge
of the board.</li>
<li>The board edge is lifted clear in the middle of the footprint.  The gap
will allow the fuse to be locked to the PCB with a small cable tie.  This
is to ensure the fuse can’t fall out over time with vibration or from
being dropped.  Without this, the autopilot could fail with no-one at
the helm!</li>
</ul>
<figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/4-legs-footprint.png" alt="PCB leg footprint" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/4-legs-footprint-2xl.png 1920w"></figure><h2 id="step-5-do-layout-for-pcb-which-holds-standard-fuse-holder">Step 5: Do layout for PCB which holds standard fuse holder</h2>
<p>Here I’m combining the fuseholder footprint with the legs footprint.  The
two footprints are joined with 3mm-wide copper on this side (red colour),
and 3mm copper on the other side (green, not shown).  Also shown here is
the rest of the board outline (the part not supplied by the legs footprint)
and silkscreen showing version and date.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/5-std-pcb.png" alt="PCB for standard fuse holder" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/5-std-pcb-2xl.png 1920w"></figure><h2 id="step-6-do-layout-for-pcb-which-holds-mini-fuse-holder">Step 6: Do layout for PCB which holds mini fuse holder</h2>
<p>Same for the mini fuse holder.  Note the arc at top right: KiCad has
some harmless minor bugs regarding drawing arcs at low resolution.  I
suspect it’s some kind of off-by-one bug in the rendering code.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/6-mini-pcb.png" alt="PCB for mini fuse holder" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/6-mini-pcb-2xl.png 1920w"></figure><h2 id="step-7-print-on-paper-and-do-fit-tests-with-real-components">Step 7: Print on paper and do fit tests with real components</h2>
<p>This, believe it or not, is the most important part of the whole process.
The idea is to print out the PCBs on paper at 1:1 size, and make sure the
components fit.  Ignore this step at your own peril!  What I’m looking
for is that I have the component sizes right, and the sizes of the holes
and/or slots are right.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/7-fit-test.jpg" alt="Fit test" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-xs.jpg 640w ,https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-sm.jpg 768w ,https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-md.jpg 1024w ,https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/9/responsive/7-fit-test-2xl.jpg 1920w"></figure><h2 id="step-8-send-gerbers-to-jlc-for-manufacture">Step 8: Send gerbers to JLC for manufacture</h2>
<p>After the fit test, I use KiCad to generate gerber and drill files, then put
them into a zip file (for example, <code>kicad-fuse-std-1.0a.zip</code> and
<code>kicad-fuse-mini-1.0a.zip</code>.  After uploading the zip file to JLC, the JLC
website shows a rendering of the board.  Getting five of these boards is
only USD2, what a bargain. </p><p>This pic shows the two designs:</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/9/8-jlc.png" alt="PCB renders from JLC" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/9/responsive/8-jlc-xs.png 640w ,https://capnkernel.github.io/media/posts/9/responsive/8-jlc-sm.png 768w ,https://capnkernel.github.io/media/posts/9/responsive/8-jlc-md.png 1024w ,https://capnkernel.github.io/media/posts/9/responsive/8-jlc-lg.png 1366w ,https://capnkernel.github.io/media/posts/9/responsive/8-jlc-xl.png 1600w ,https://capnkernel.github.io/media/posts/9/responsive/8-jlc-2xl.png 1920w"></figure><p>It’s interesting to note that JLC’s rendering software also has problems with
the arcs in the corners of the boards, but it shouldn’t affect the final result.</p><h2 id="step-9-wait-for-boards-to-arrive-measure-dimensions-and-create-footprint-for-main-board">Step 9: Wait for boards to arrive, measure dimensions and create footprint for main board</h2>
<p>When these adaptor boards arrive, I’ll measure the thickness of the boards,
plus the widths of the legs, and design a new footprint to go on the autopilot
board.  I’m looking for a nice snug fit, so I need to measure the dimensions
of the actual adaptor PCBs.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Planter boxes using corflute and milk crates</title>
        <author>
            <name>Mitch</name>
        </author>
        <link href="https://capnkernel.github.io/planter-boxes-using-corflute-and-milk-crates.html"/>
        <id>https://capnkernel.github.io/planter-boxes-using-corflute-and-milk-crates.html</id>

        <updated>2023-01-06T12:00:00+11:00</updated>
            <summary>
                <![CDATA[
                    (Note this is from 2023; we’ve moved since then) There’s no soil where we live, just a concrete space. Everything we plant has to be in a container of some sort, and our soil (3m² of it) was shipped in on a truck: When exploring&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>(Note this is from 2023; we’ve moved since then)</p><p>There’s no soil where we live, just a concrete space.  Everything we plant has
to be in a container of some sort, and our soil (3m² of it) was shipped in on
a truck:</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-soil-1.jpg" alt="Lots of soil" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-soil-1-2xl.jpg 1920w"></figure><p>When exploring container ideas, we wanted something that was cheap, and that
was deep enough for growing vegetables.  If soil isn’t deep enough, vegies
either grow extremely slowly, go straight to seed, or both.  I kept my eye out
for options which minimised cost while being deep enough.  Some experiments
showed me that plastic milk crates are deep enough, and can be found in large
quantities out the back of cafes and supermarkets.  And what to line the crates
with?  I found a large stack of corflute (corrugated plastic) that had been
used for advertising.  The sheets aren’t small: 2.4m x 0.9m.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-20230108_104029.jpg" alt="stack of corflute " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-20230108_104029-2xl.jpg 1920w"></figure><p>At first I tried eyeballing how to cut out the corflute, however I kept
having problems with not correctly allowing for how the flaps I wanted
between the panels would alter the other dimensions.  Also, upon folding up
the cut-out corflute, they were either a little too large, or a little too
small.  After finding something that was almost right, I decided to do things
<em>the right way</em> and design the corflute cutout in <a href="https://www.freecad.org/">FreeCAD</a>.  FreeCAD has a
mode called “<a href="https://wiki.freecadweb.org/SheetMetal_Workbench">Sheet Metal Workbench</a>“, which will take a shape made of 3D planes,
and open it out into a flat shape that can be refolded back into the original.</p><p>Here’s the box.  I started with the base, then added the back, then from there
went around adding each side.  Finally I added flaps for the bottom joins and
side join.</p><figure class="post__image"><img src="https://capnkernel.github.io/media/posts/8/planter-boxes-freecad-box.png" alt="Box designed in FreeCAD " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-xs.png 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-sm.png 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-md.png 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-lg.png 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-xl.png 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-box-2xl.png 1920w"></figure><p>Here’s a detail of a corner up close:</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-freecad-fold.jpg" alt="Shape folded " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-fold-2xl.jpg 1920w"></figure><p>At bottom left is the base, then attached to that on the right is the back.  From
 there I added the greenish-tinted side, and from there through the yellow-tinted
fold, the flap.  Finally I used the sheet metal workbench to unfold the shape.
The blue lines show where to cut all the way through the corflute, and the green
lines show where to only cut one side of the corflute, making a hinge.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-freecad-unfolded.jpg" alt="Shape unfolded " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-freecad-unfolded-2xl.jpg 1920w"></figure><p>I tried marking this shape out on corflute, but it took a long time each time,
and it was very easy to make mistakes.  Since the shape is the same every time,
what I need is a template!  I worked out that Officeworks will print onto <a href="https://en.wikipedia.org/wiki/ISO_216#Dimensions_of_A,_B_and_C_series">A0
paper</a> for $5, so I plotted the shape 1:1 into an A0-sized PDF.  The shape only
just fits, jutting over the border slightly.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-a0-printout.jpg" alt="A0 printout " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-a0-printout-2xl.jpg 1920w"></figure><p>I cut out the printout, and glued it to 3mm MDF with PVA glue.  Then I used
a power jigsaw to cut the MDF to shape.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-template.jpg" alt="Printout glued to MDF, and cut to shape " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-template-2xl.jpg 1920w"></figure><p>Now I can just lay the template on a half-sheet of corflute, mark around it
with pencil, remove the template, then cut along the pencil lines with a
utility knife and a steel ruler.  Marking and cutting takes 10-15 minutes.
The blanks fold up very nicely and fit snugly within the milk crate.  Since
the milk crate panels are about 30cm on a side, I can cut four L-shaped
blanks from a single sheet of corflute, leaving just a 30x60cm piece
from the middle that I can use for something else.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-blanks-ready-for-folding.jpg" alt="Blanks cut from corflute, ready for folding " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-blanks-ready-for-folding-2xl.jpg 1920w"></figure><p>I’m planning to make a lot more of these boxes, and now that I have a template,
it’s quite quick and reproducible.  There’ll be a lot more of these soon.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-our-garden.jpg" alt="Our modular garden " sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-our-garden-2xl.jpg 1920w"></figure><p>Bonus: I also made a deeper box (shown above) using corflute and planks from a
shipping pallet, held together with tek screws.  It’s really rough, only
intended to last one season:</p><figure class="post__image"><img src="https://capnkernel.github.io/media/posts/8/planter-boxes-big-box-1.jpg" alt="Building a deep box" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-1-2xl.jpg 1920w"></figure><p>This box is especially suited to plants with taproots, such as radishes.</p><figure class="post__image"><img loading="lazy" src="https://capnkernel.github.io/media/posts/8/planter-boxes-big-box-2.jpg" alt="A deep box" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-xs.jpg 640w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-sm.jpg 768w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-md.jpg 1024w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/8/responsive/planter-boxes-big-box-2-2xl.jpg 1920w"></figure>
            ]]>
        </content>
    </entry>
</feed>
