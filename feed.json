{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mitch&#x27;s Notes",
    "description": "",
    "home_page_url": "https://capnkernel.github.io",
    "feed_url": "https://capnkernel.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Mitch"
    },
    "items": [
        {
            "id": "https://capnkernel.github.io/planter-boxes-using-corflute-and-milk-crates.html",
            "url": "https://capnkernel.github.io/planter-boxes-using-corflute-and-milk-crates.html",
            "title": "Planter boxes using corflute and milk crates",
            "summary": "(From Jan 2023, we’ve moved since) There’s no soil where we live, just a concrete space. Everything we plant has to be in a container of some sort, and our soil (3m² of it) was shipped in on a truck:",
            "content_html": "<p>(From Jan 2023, we’ve moved since)</p><p>There’s no soil where we live, just a concrete space.  Everything we plant has\nto be in a container of some sort, and our soil (3m² of it) was shipped in on\na truck:</p><figure class=\"post__image\"><img src=\"https://capnkernel.github.io/media/posts/7/planter-boxes-soil-1.jpg\" alt=\"Lots of soil\" width=\"2628\" height=\"1940\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-xs.jpg 640w ,https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-sm.jpg 768w ,https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-md.jpg 1024w ,https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-lg.jpg 1366w ,https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-xl.jpg 1600w ,https://capnkernel.github.io/media/posts/7/responsive/planter-boxes-soil-1-2xl.jpg 1920w\"></figure><figure class=\"post__image\"><img loading=\"lazy\" src=\"/media/posts/7/planter-boxes-soil-1-2.jpg\" alt=\"Image description\" width=\"2628\" height=\"1940\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"/media/posts/7/responsive/planter-boxes-soil-1-2-xs.jpg 640w ,/media/posts/7/responsive/planter-boxes-soil-1-2-sm.jpg 768w ,/media/posts/7/responsive/planter-boxes-soil-1-2-md.jpg 1024w ,/media/posts/7/responsive/planter-boxes-soil-1-2-lg.jpg 1366w ,/media/posts/7/responsive/planter-boxes-soil-1-2-xl.jpg 1600w ,/media/posts/7/responsive/planter-boxes-soil-1-2-2xl.jpg 1920w\"></figure>",
            "author": {
                "name": "Mitch"
            },
            "tags": [
            ],
            "date_published": "2025-09-23T14:11:32+10:00",
            "date_modified": "2025-10-03T15:01:17+10:00"
        },
        {
            "id": "https://capnkernel.github.io/inventree-100-install.html",
            "url": "https://capnkernel.github.io/inventree-100-install.html",
            "title": "Inventree 1.0.x install",
            "summary": "Bare metal Installation instructions here: https://docs.inventree.org/en/latest/start/install/ Here’s what I did different: Do the apt-get install of required system packages For Weasyprint: https://doc.courtbouillon.org/weasyprint/stable/first_steps.html apt install pango1.0-tools The rest of what Weasyprint needs will be auto-installed into the venv later. Create user with uid 1118 (to not&hellip;",
            "content_html": "<p>Bare metal Installation instructions here:</p><p>  <a href=\"https://docs.inventree.org/en/latest/start/install/\">https://docs.inventree.org/en/latest/start/install/</a></p><p>Here’s what I did different:</p><h2 id=\"install-system-packages\">Install System Packages</h2>\n<p>Do the <code>apt-get install</code> of required system packages<br>For Weasyprint:<br><a href=\"https://doc.courtbouillon.org/weasyprint/stable/first_steps.html\">https://doc.courtbouillon.org/weasyprint/stable/first_steps.html</a><br><code>apt install pango1.0-tools</code><br>The rest of what Weasyprint needs will be auto-installed into the venv later.</p><h2 id=\"create-inventree-user\">Create InvenTree User</h2>\n<p>Create user with uid 1118 (to not clash with other uids), which is a member of <code>www-data</code> group.</p><p>Instead of:</p><pre><code>useradd -m -d /home/inventree -s /bin/bash inventree\n</code></pre>\n<p>… run:</p><pre><code>useradd -m -U -u 1118 -G www-data -s /bin/bash inventree\nchown inventree:www-data /home/inventree\nchmod o-rwx /home/inventree\n</code></pre>\n<p>Re <code>su inventree</code>, I installed my own ssh public key:</p><pre><code>[ -f /home/inventree/.ssh/authorized_keys ] || (\n  cd /home/inventree\n  mkdir --mode 700 .ssh\n    chown inventree:inventree .ssh\n  cp /home/mjd/.ssh/mjd@xiaomao.afork.com .ssh/\n  cat .ssh/*@* | sort | uniq &gt; .ssh/authorized_keys\n    chown inventree:inventree .ssh/*\n    chmod go-rwx .ssh/authorized_keys\n)\n</code></pre>\n<p>From here on, do everything logged in as the inventree user.</p><h2 id=\"create-required-directories\">Create Required Directories</h2>\n<pre><code>cd\nmkdir data\ncd data\nmkdir static media backup\nchgrp www-data static media backup\nchmod g+s backup media\ncd ..\n</code></pre>\n<h2 id=\"download-source-code\">Download Source Code</h2>\n<p>Instead of:</p><pre><code>git clone https://github.com/inventree/inventree src\n</code></pre>\n<p>… run:</p><pre><code>git clone -b stable https://github.com/inventree/inventree src\n</code></pre>\n<p>Then: Create and patch config (<code>~/src/config/config.yaml</code>), as follows.</p><p><strong>Note, you’ll need to provide values for anything with a % below.</strong></p><pre><code># Helper function\nyaml_set() {\n  F=~/src/config/config.yaml\n  cp $F $F.tmp; awk -v key=&quot;$1&quot; -v val=&quot;$2&quot; &#39;BEGIN {\n      have_dot = index(key, &quot;.&quot;);\n      if (have_dot) {\n          split(key, parts, &quot;.&quot;)\n          parent = parts[1]\n          child = parts[2]\n      }\n  }\n  { \n    if (have_dot) {\n      if ($0 ~ &quot;^[[:alnum:]_]+:&quot;) in_parent = 0;\n      if ($0 ~ &quot;^&quot; parent &quot;:&quot;) in_parent = 1;\n      if (in_parent &amp;&amp; match($0, &quot;^([[:space:]]*)(#[[:space:]]*)?(&quot; child &quot;):&quot;, m)) $0 = m[1] m[3] &quot;: &quot; val;\n    } else if (patsplit($0, m, &quot;^[[:space:]]*(#[[:space:]]*)?&quot; key &quot;:&quot;)) $0 = key &quot;: &quot; val;\n    print\n  }&#39; &lt; $F.tmp &gt; $F; rm $F.tmp\n}\n</code></pre>\n<pre><code>ln -sf ../src/backend/InvenTree/config_template.yaml src/config/config.yaml.orig\ncp src/config/config.yaml.orig src/config/config.yaml\n\nyaml_set database.ENGINE mysql\nyaml_set database.NAME itree\nyaml_set database.USER dbuser\nyaml_set database.PASSWORD %same-as-for-the-portal\n\nyaml_set site_url https://itree.superlab.au/\n\nyaml_set debug False\n\nyaml_set admin_enabled True\nyaml_set admin_url itree-admin\nyaml_set admin_user admin\nyaml_set admin_email itreeadmin@superhouse.tv\nyaml_set admin_password %admin-user-password\n\nyaml_set language en-AU\nyaml_set timezone Australia/Melbourne\n\nyaml_set email.sender itree@superlab.au\nyaml_set email.host mail.smtp2go.com\nyaml_set email.port 2525\nyaml_set email.username itree\nyaml_set email.password %smtp2go-password\n\nyaml_set plugins_enabled True\n\nyaml_set media_root /home/inventree/data/media\nyaml_set static_root /home/inventree/data/static\nyaml_set backup_dir /home/inventree/data/backup\n\nyaml_set background.workers 1\n\nyaml_set login_default_protocol https\n\nyaml_set global_settings.INVENTREE_DEFAULT_CURRENCY AUD\n</code></pre>\n<h2 id=\"create-virtual-environment\">Create Virtual Environment</h2>\n<p>As per instructions.</p><h2 id=\"install-inventree-packages\">Install InvenTree Packages</h2>\n<p>Instead of:</p><pre><code>pip install --upgrade --ignore-installed invoke\ninvoke install\n</code></pre>\n<p>… run:</p><pre><code>cd ~/src\npip install --upgrade --ignore-installed invoke\ninvoke install --skip-plugins\n</code></pre>\n<p>If you run <code>invoke</code> and get a message <code>Can&#39;t find any collection named &#39;tasks&#39;!</code>, then you need to run <code>cd ~/src</code> first, because <code>invoke</code> is sensitive to the directory it runs in.</p><p>If you run <code>invoke install</code> and you get this message:</p><pre><code>yaml.scanner.ScannerError: while scanning for the next token\nfound character &#39;%&#39; that cannot start any token\n  in &quot;/home/inventree/src/config/config.yaml&quot;, line 27, column 13\n</code></pre>\n<p>… then you need to go edit <code>~/etc/config.yaml</code> and patch in the passwords for any line containing <code>%</code>.</p><p><code>--skip-plugins</code> is necessary because without this, the install tries to access the db, which hasn’t been set up yet.</p><h2 id=\"create-database\">Create Database</h2>\n<p>Db will be MariaDB.  Follow MySQL / MariaDB section.  Replace this:</p><pre><code>sudo apt-get install mysql-server libmysqlclient-dev\n</code></pre>\n<p>with</p><pre><code>sudo apt-get install mariadb-server libmysqlclient-dev\n</code></pre>\n<p>and</p><pre><code>pip3 install mysqlclient mariadb\n</code></pre>\n<p>with</p><pre><code>pip3 install mysqlclient\n</code></pre>\n<p>Re the SQL statements, the db I created is called <code>itree</code>, and the db user is <code>dbuser</code> (same as for the portal).  The password will need to match what’s in <code>~/etc/config.yaml</code> (see above).</p><pre><code>sudo mysql -u root\nmysql&gt; CREATE DATABASE itree;\nmysql&gt; GRANT ALL ON itree.* TO &#39;dbuser&#39;@&#39;%&#39;;\nmysql&gt; FLUSH PRIVILEGES;\nmysql&gt; EXIT;\n</code></pre>\n<p><strong>Don’t follow the web page from here on</strong></p><h2 id=\"initialize-database\">Initialize database</h2>\n<p><strong>Don’t follow any of this</strong></p><h2 id=\"and-then\">And then…</h2>\n<p>This creates the db tables and a bunch of other important setup things.</p><pre><code>invoke update --skip-backup --no-frontend\n</code></pre>\n<h2 id=\"download-front-end-react-app-files\">Download front end react app files</h2>\n<pre><code>TAG=v$(awk &#39;match($0, &quot;^INVENTREE_SW_VERSION = \\047(.*)\\047&quot;, m) {print m[1]}&#39; &lt; ./src/backend/InvenTree/InvenTree/version.py)\nmkdir -p ~/src/src/backend/InvenTree/web/static\ninvoke frontend-download --tag $TAG\ninvoke static\n</code></pre>\n<h2 id=\"worker-service\">Worker service</h2>\n<p>Inventree has a backend worker for operations that can take time, such as generating reports and sending emails.  This worker should be started on boot, and restarted if it fails.  For that we’re using supervisor (<a href=\"https://docs.inventree.org/en/latest/start/bare_prod/#configure-supervisor\">docs</a>).  </p><pre><code>sudo apt-get install supervisor\ncat &lt;&lt; EOF | sudo tee /etc/supervisor/conf.d/inventree.conf &gt; /dev/null\n; # Supervisor Config File\n; Example configuration file for running InvenTree worker using supervisor\n; Based on https://github.com/inventree/InvenTree/blob/master/contrib/deploy/supervisord.conf\n\n; InvenTree Background Worker Process\n; A background task manager processes long-running and periodic tasks\n; InvenTree uses django-q for this purpose\n[program:inventree-cluster]\nuser=uwsgi\ndirectory=/home/inventree/src/src/backend/InvenTree\ncommand=/home/inventree/env/bin/python manage.py qcluster\nstartsecs=10\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/uwsgi/app/inventree-worker.log\nstderr_logfile=/var/log/uwsgi/app/inventree-worker-err.log\nEOF\n\ncat &lt;&lt; EOF | sudo tee /etc/supervisor/conf.d/inet_http_server.conf &gt; /dev/null\n[inet_http_server]\nport = 127.0.0.1:9001\nEOF\n\nsudo systemctl reload supervisor\n</code></pre>\n<p>Logs for the worker can be viewed here:\n<a href=\"http://localhost:9001/\">http://localhost:9001/</a>\n… where <code>localhost</code> is the inventree server.  Since that port is only available locally on the server, you’ll need to use <code>ssh -L</code> or similar to get the HTTP request forwarded from your machine to the server, or use the <code>links</code> text browser.</p><h2 id=\"install-redis\">Install redis?</h2>\n<p>If redis is installed, it will be used by the backend web code to communicate to the backend worker code.  If it’s not there, things will still work, but slower.  Symptoms are long waits for worker stuff to happen.  </p><pre><code>## So let&#39;s not\n# sudo apt install redis-server\n</code></pre>\n<h2 id=\"setting-up-uwsgi-app-server\">Setting up uWSGI (app server)</h2>\n<p>It is assumed that the <code>uwsgi-emperor</code> package has already been installed, and it’s up and running the portal.</p><pre><code>cat &lt;&lt; EOF | sudo tee /etc/uwsgi-emperor/vassals-available/inventree.ini &gt; /dev/null\n[uwsgi]\nplugin = python3\nchdir = /home/inventree/src/src/backend/InvenTree\nvirtualenv = /home/inventree/env\n# /home/inventree/src/src/backend/InvenTree/InvenTree/wsgi.py\nmodule = InvenTree.wsgi:application\n\nmaster = true\nprocesses = 2\nenable-threads = true\n\ncheaper = 1\ncheaper-initial = 0\ncheaper-min = 0\ncheaper-max = 4\ncheaper-algo = spare\n\n# idle = 60\n# die-in-idle = true\n\nhttp-socket = /run/uwsgi/%n.sock\nchmod-socket = 660\nchown-socket = uwsgi:www-data\nuid = uwsgi\ngid = www-data\n\nvacuum = true\ndie-on-term = true\n\n# Optional logging:\nlogto = /var/log/uwsgi/app/%n.log\nEOF\n\nsudo ln -sf ../vassals-available/inventree.ini /etc/uwsgi-emperor/vassals-enabled/inventree.ini \n</code></pre>\n<p>Check that the app server is now running.  Example:</p><pre><code>inventree@portal:~$ ps aux | grep uwsgi-core | grep inventree.ini\nwsgi      67994 86.1 15.9 230520 157424 ?       R    15:07   0:19 /usr/bin/uwsgi-core --ini inventree.ini\n\ninventree@portal:~$ \n</code></pre>\n<p>Check also for the existence of <code>/var/run/uwsgi/inventree.sock</code>.</p><p>The uWSGI log can be viewed with:</p><pre><code>sudo journalctl -u uwsgi-emperor\n</code></pre>\n<p>Add <code>-f</code> to tail the log.</p><h2 id=\"setting-up-caddy-web-proxy\">Setting up caddy (web proxy)</h2>\n<p>Amend <code>/etc/caddy/Caddyfile</code> to add this:</p><pre><code># CORS headers control (used for static and media files)\n(cors-headers) {\n    header Allow GET,HEAD,OPTIONS\n    header Access-Control-Allow-Origin *\n    header Access-Control-Allow-Methods GET,HEAD,OPTIONS\n    header Access-Control-Allow-Headers Authorization,Content-Type,User-Agent\n \n    @cors_preflight{args[0]} method OPTIONS\n \n    handle @cors_preflight{args[0]} {\n        respond &quot;&quot; 204\n    }\n}\n\nitree.example.com {\n        log {\n                output file /var/log/caddy/itree.log\n                format filter {\n                        wrap console\n                        fields {\n                                request&gt;headers&gt;Authorization delete\n                        }\n                }\n        }\n\n        encode gzip\n\n        # Add request body size limit for file uploads\n        request_body {\n                max_size 100MB\n        }\n\n        header {\n                Strict-Transport-Security max-age=31536000;\n        }\n\n        handle /favicon.ico {\n                root * /home/inventree/data/static/img/favicon\n                file_server\n        }\n\n        handle_path /static/* {\n                import cors-headers static\n                root * /home/inventree/data/static\n                file_server\n        }\n\n        handle_path /media/* {\n                import cors-headers media\n                root * /home/inventree/data/media\n                file_server\n                # Authentication for media files\n                forward_auth unix//run/uwsgi/inventree.sock {\n                        uri /auth/\n                }\n        }\n\n        reverse_proxy unix//run/uwsgi/inventree.sock\n}\n\n# Refer to the Caddy docs for more information:\n# https://caddyserver.com/docs/caddyfile\n</code></pre>\n<p>Note: Change <code>itree.example.com</code> to a suitable hostname.  You’ll also need to create A or CNAME DNS records for this host. </p><p>(Basis: <a href=\"https://github.com/inventree/inventree/blob/master/contrib/container/Caddyfile\">https://github.com/inventree/inventree/blob/master/contrib/container/Caddyfile</a>)</p><p>Restart caddy:</p><pre><code>sudo systemctl reload caddy\n</code></pre>\n<p>The caddy log can be viewed with:</p><pre><code>sudo journalctl -u caddy\n</code></pre>\n<p>Add <code>-f</code> to tail the log.</p><h2 id=\"backups\">Backups</h2>\n<p>Backups of the database and of the media files are done to <code>~/data/backup</code> once a day by the worker.  Database backups end in <code>.dump.gz</code>, and media backups end in <code>.tar.gz</code>.  A cron job, run by the <code>uwsgi</code> user, sends the backups offsite every four hours using <code>rsync</code>.  The backup filenames contain the hostname rather than the virtual host name due to <a href=\"https://github.com/inventree/InvenTree/issues/10488\">limitations in InvenTree</a>.</p><h2 id=\"upgrading\">Upgrading</h2>\n<pre><code>cd ~/src\ngit pull\n</code></pre>\n<p>Then do the steps in the <strong>Download front end react app files</strong> section above.  Then:</p><pre><code>sudo touch /etc/uwsgi-emperor/vassals/inventree.ini\n</code></pre>\n<p>You’ll need to reload any web pages you have open.</p><h2 id=\"todo\">TODO</h2>\n<ul>\n<li>Backups - need to check whether the InvenTree worker is kicking off backups.<br><a href=\"https://docs.inventree.org/en/latest/start/backup/#daily-backup\">https://docs.inventree.org/en/latest/start/backup/#daily-backup</a></li>\n</ul>\n",
            "author": {
                "name": "Mitch"
            },
            "tags": [
            ],
            "date_published": "2025-09-23T13:53:30+10:00",
            "date_modified": "2025-10-06T13:11:36+11:00"
        }
    ]
}
